<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prometheus.NetStandard</name>
    </assembly>
    <members>
        <member name="M:Prometheus.Advanced.Child.Publish">
            <summary>
            Marks the metric as one to be published, even if it might otherwise be suppressed.
            This is useful for publishing zero-valued metrics once you have loaded data and determined
            that there is no data to actually include in the metric.
            </summary>
        </member>
        <member name="F:Prometheus.Advanced.DefaultCollectorRegistry.Instance">
            <summary>
            The singleton registry used by default when the caller does not specify a custom/specific registry.
            </summary>
        </member>
        <member name="M:Prometheus.Advanced.DefaultCollectorRegistry.Clear">
            <summary>
            Clears all collectors and on-demand collectors from the registry.
            </summary>
        </member>
        <member name="T:Prometheus.Advanced.DotNetStatsCollector">
            <summary>
            Collects basic .NET metrics about the current process.
            </summary>
        </member>
        <member name="T:Prometheus.Advanced.ICollector">
            <summary>
            A collector mantains one or more metric families worth of data. Builtin collectors like Gaguge focus
            on a single metric family, whereas custom implementation are much more free in what they allow.
            </summary>
        </member>
        <member name="P:Prometheus.Advanced.ICollector.Name">
            <summary>
            The name of the collector. For builtin collectors, this is the name of the metric family
            but this need not be the case with custom collectors (as they may even return multiple families).
            
            Only one collector with the same name can be registered in one collector registry.
            </summary>
        </member>
        <member name="P:Prometheus.Advanced.ICollector.LabelNames">
            <summary>
            Label keys applied by metrics using this collector.
            
            This is used with builtin collectors to avoid causing conflicts when registering the same collector
            twice with different label names. It need not match the actual metric families in custom collectors.
            </summary>
        </member>
        <member name="M:Prometheus.Advanced.ICollector.Collect">
            <summary>
            Collects one or more metric families' worth of data. Anything provided here
            is exported to Prometheus after some basic validity checking.
            </summary>
        </member>
        <member name="T:Prometheus.Advanced.IOnDemandCollector">
            <summary>
            An on-demand collector is a mechanism that enables one or more metrics to be updated before each data collection.
            
            It is by itself not a collector in Prometheus terms, as it does not produce any data, simply manages other collectors.
            </summary>
        </member>
        <member name="M:Prometheus.Advanced.IOnDemandCollector.RegisterMetrics(Prometheus.Advanced.ICollectorRegistry)">
            <summary>
            Called when the instance is associated with a collector registry, so that the collectors managed
            by this instance can be registered. Note that collectors can be registered with more than one registry.
            </summary>
        </member>
        <member name="M:Prometheus.Advanced.IOnDemandCollector.UpdateMetrics">
            <summary>
            Called before each collection. Any values in collectors managed by this instance should now be brought up to date.
            
            If this throws <see cref="T:Prometheus.Advanced.ScrapeFailedException"/> then the collection will fail (not only from this collector
            but globally). This will result in an appropriate HTTP error code or a skipped push, depending on type of exporter.
            </summary>
        </member>
        <member name="T:Prometheus.Advanced.ScrapeFailedException">
            <summary>
            Signals to the metrics server that metrics from on-demand collectors are currently unavailable.
            This causes the entire export operation to fail - even if some metrics are available, they will not be exported.
            
            The exception message will be delivered as the HTTP response body by the exporter.
            </summary>
        </member>
        <member name="M:Prometheus.ExtensionsForMetrics.StartTimer(Prometheus.IGauge)">
            <summary>
            Enables you to easily report elapsed seconds in the value of a gauge.
            You need to manually call .ApplyDuration() on the returned instance to update the value of the gauge.
            </summary>
        </member>
        <member name="M:Prometheus.ExtensionsForMetrics.SetToCurrentTime(Prometheus.IGauge)">
            <summary>
            Sets the value of the gauge to the current Unix timestamp in seconds.
            </summary>
        </member>
        <member name="T:Prometheus.IMetricServer">
            <summary>
            A metric server exposes a Prometheus metric exporter endpoint in the background,
            operating independently and serving metrics until it is instructed to stop.
            </summary>
        </member>
        <member name="M:Prometheus.IMetricServer.Start">
            <summary>
            Starts serving metrics.
            
            Returns the same instance that was called (for fluent-API-style chaining).
            </summary>
        </member>
        <member name="M:Prometheus.IMetricServer.StopAsync">
            <summary>
            Instructs the metric server to stop and returns a task you can await for it to stop.
            </summary>
        </member>
        <member name="M:Prometheus.IMetricServer.Stop">
            <summary>
            Instructs the metric server to stop and waits for it to stop.
            </summary>
        </member>
        <member name="T:Prometheus.Internal.LabelValues">
            <summary>
            The set of labels and label values associated with a metric. Used both for export and as keys.
            </summary>
            <remarks>
            Only the values are considered for equality purposes - the caller must ensure that
            LabelValues objects with different sets of names are never compared to each other.
            </remarks>
        </member>
        <member name="P:Prometheus.Internal.LabelValues.WireLabels">
            <summary>
            These are exported with metrics. Lazy-initialized in order to save allocations when using LabelValues as keys.
            </summary>
        </member>
        <member name="T:Prometheus.MetricConfiguration">
            <summary>
            This class packages the options for creating metrics into a single class (with subclasses per metric type)
            for easy extensibility of the API without adding numerous method overloads whenever new options are added.
            </summary>
        </member>
        <member name="P:Prometheus.MetricConfiguration.LabelNames">
            <summary>
            Names of all the label fields that are defined for the metric.
            If not set, the metric will be created without any labels.
            
            Before using a metric that uses labels, .WithLabels() must be called to provide values for the labels.
            </summary>
        </member>
        <member name="P:Prometheus.MetricConfiguration.SuppressInitialValue">
            <summary>
            If true, the metric will not be published until its value is first modified (regardless of the specific value).
            This is useful to delay publishing gauges that get their initial values delay-loaded.
            
            By default, metrics are published as soon as possible - if they do not use labels then they are published on
            creation and if they use labels then as soon as the label values are assigned.
            </summary>
        </member>
        <member name="T:Prometheus.MetricHandler">
            <summary>
            Base class for various metric server implementations that start an independent exporter in the background.
            The expoters may either be pull-based (exposing the Prometheus API) or push-based (actively pushing to PushGateway).
            </summary>
        </member>
        <member name="T:Prometheus.MetricPusher">
            <summary>
            A metric server that regularly pushes metrics to a Prometheus PushGateway.
            </summary>
        </member>
        <member name="F:Prometheus.MetricPusher.ContentType">
            <summary>
            Used as input for the srape handler, so it generates the output in the expected format.
            Not used in PushGateway communications.
            </summary>
        </member>
        <member name="T:Prometheus.MetricServer">
            <summary>
            Implementation of a Prometheus exporter that serves metrics using HttpListener.
            </summary>
        </member>
        <member name="M:Prometheus.Summary.Child.Observe(System.Double,System.DateTime)">
            <summary>
            For unit tests only
            </summary>
        </member>
    </members>
</doc>
